'''
# This is what the get_values function looks like
# and where it will be placed in the protocol
# when generated by the protocol library
def get_values(*names):
            import json
            _all_values = json.loads("""{"integer_example":1,"float_example":1,"string_example":"string_example","options_boolean_example_default_true":true,"options_boolean_example_default_false":false,"options_string_example":"flex_1channel_1000","protocol_filename":"pattern5"}""")
            return [_all_values[n] for n in names]
'''


def get_values_test(*names):
    import json

    _all_values = json.loads(
        """{"int_example":2,"float_example":2.0,"string_example":"string_example_test","options_boolean_example_default_true":"True","options_boolean_example_default_false":"False"}"""
    )
    return [_all_values[n] for n in names]


metadata = {
    # Leave out the protocol name so that the filename is used in the app
    # Protocol Library will allow you to name the protocol file on download
    # if the protocol has parameters
    "author": "Opentrons <protocols@opentrons.com>",
    "source": "Protocol Library",
}

requirements = {
    "robotType": "Flex",
    "apiLevel": "2.15",
}


def run(protocol):
    # Instantiate and set the defaults for your variables
    # that are mapped to the protocol parameters
    # These should match the defaults defined in your parameters json
    int_example = 1
    float_example = 1.0
    string_example = "string_example"
    options_boolean_example_default_true = True
    options_boolean_example_default_false = False
    options_string_example = "flex_1channel_50"
    # TODO file_example = ""

    # if the get_values function is defined,
    # as it would be when this protocol is downloaded from the protocol library,
    # read the values from the json string there
    # overwriting the defaults defined above
    try:
        [
            int_example,
            float_example,
            string_example,
            options_boolean_example_default_true,
            options_boolean_example_default_false,
            options_string_example,
        ] = get_values(
            "int_example",
            "float_example",
            "string_example",
            "options_boolean_example_default_true",
            "options_boolean_example_default_false",
            "options_string_example",
        )
    except NameError:
        # get_values is not defined, so proceed with defaults
        pass

    print(locals())


# here are parameters defined as a list of dictionaries
# if you like you can define them like this and use the code below to generate the json
# the order of the keys inside each parameter {} does not matter
# the order of options do! The first option will be the default
parameters = [
    {
        "label": "Integer Example",
        "name": "integer_example",
        "type": "int",
        "default": 1,
    },
    {
        "label": "Float Example",
        "name": "float_example",
        "type": "float",
        "default": 1.0,
    },
    {
        "label": "String Example",
        "name": "string_example",
        "type": "str",
        "default": "string_example",
    },
    {
        "label": "Options Boolean Example Default True",
        "name": "options_boolean_example_default_true",
        "type": "dropDown",
        "options": [{"label": "Yes", "value": True}, {"label": "No", "value": False}],
    },
    {
        "label": "Options Boolean Example Default False",
        "name": "options_boolean_example_default_false",
        "type": "dropDown",
        "options": [{"label": "No", "value": False}, {"label": "Yes", "value": True}],
    },
    {
        "label": "Choose your pipette",
        "name": "options_string_example",
        "type": "dropDown",
        "options": [
            {"label": "1-50µL", "value": "flex_1channel_50"},
            {"label": "50-1000µL", "value": "flex_1channel_1000"},
        ],
    },
]


def main():
    """To run me on the console
    python pattern.py
    """
    run(None)  # use print statements to see your variables
    import json

    # write the parameters defined as a dictionary as json to a file
    with open("pattern_parameters.json", "w", encoding="UTF-8") as f:
        json.dump(
            parameters,
            f,
            indent=4,
        )


if __name__ == "__main__":
    main()
